#! /bin/bash

# Command Args
subcommand=${1}

# User Configurable Params (prefixed by `HOMEPORTS_`)
HP_DIR=${HOMEPORTS_DIR:-$HOME/.homeports}
HP_EDITOR=${HOMEPORTS_EDITOR:-code}
HP_SHELL=${HOMEPORTS_SHELL:-bash}

set -u

# Internal Use Params
HP_USER_HOME=${HP_DIR}/home
HP_CACHE=${HP_DIR}/cache

hp-help() {
cat << __EOM__
Management user home
Usage: homeports <command> ...

Entry Management Commands:
  add <file> [<file> ...]
          : register files to be under homeports management (with commit)
  delink  : replace all symlinks into reguler files
  edit    : open homeports directory by HOMEPORTS_EDTOR=${HP_EDITOR}
  link    : create symlinks
  links   : list all symlinks
  list    : list all registered entries
  rm [<entry> ...]
          : unregister the entry (with commit)

Repository Management Commands:
  commit  : commit changes
  pull    : pull updates from remote
  push    : push updates to remote
  remote  : show remote information

Utility Commands:
  doctor  : check dependencies
  env     : show configurable ENVs
  find    : find all links pointing the repository under $HOME
  help    : show this help
  init    : clean all registered contents
  log     : show commit log
  sh      : enter homeports shell by HOMEPORTS_SHELL=${HP_SHELL}
  update  : update homeports
__EOM__
}

# Entry Management Commands
# -------------------------

hp-add() {
  new_entries=""
  for src in $@; do
    echo $src
    src_path_from_home=$(realpath --relative-base ~ $src)
    dest_dir=$(dirname $HP_USER_HOME/$src_path_from_home)
    mkdir -p $dest_dir
    cp -r $src $dest_dir
    echo "copy ~/${src_path_from_home} -> ${dest_dir}"
    new_entries+=$(basename $src),
  done;

  cd $HP_USER_HOME
  git add .
  git commit -m "Add ${new_entries%?}"
}

hp-delink() {
  for entry in $(hp-list); do
    link=$HOME/$entry
    if is-managed-symlink $link; then
      echo "Delink $link"
      rm $link
      cp -r $HP_USER_HOME/$entry $link
    fi
  done
}

hp-edit() {
  $HP_EDITOR $HP_USER_HOME
}

hp-link() {
  for entry in $(hp-list); do
    if ! has-symlink $entry; then
      echo "Craete symlink: ${HP_USER_HOME}/${entry} -> ~/${entry}"
      ln -s $HP_USER_HOME/$entry ~/$entry
    fi
  done
}

hp-links() {
  for entry in $(hp-list); do
    link=$HOME/$entry
    if is-managed-symlink $link; then
      print-link $link
    fi
  done
}

hp-list() {
  cd $HP_USER_HOME
  find . -type f | cut -sd / -f 2- | grep -v .git
}

hp-rm() {
  cd $HP_USER_HOME
  git rm -r $@
  git commit -m "Remove $@"
}

# Repository Management Commands
# ------------------------------

hp-commit() {
  cd $HP_USER_HOME
  entries=$(git diff --name-only | cut -sd / -f 2- | tr '\n' ' ')
  git add .
  git commit -m "Edit ${entries}"
}

hp-pull() {
  cd $HP_USER_HOME
  git pull
}

hp-push() {
  cd $HP_USER_HOME
  git push
}

hp-remote() {
  cd $HP_USER_HOME
  git fetch
  echo "Repository:"
  git remote -v
  echo "Diff:"
  git diff origin/master
}

# Utility Commands
# ----------------

hp-doctor() {
  if ! type realpath &> /dev/null; then
    echo "Missing a command 'realpath', it's packaged in GNU 'coreutils'"
  fi
}

hp-env() {
  echo "HOMEPORTS_DIR    =${HP_DIR}"
  echo "HOMEPORTS_SHELL  =${HP_SHELL}"
  echo "HOMEPORTS_EDITOR =${HP_EDITOR}"
}

hp-find() {
  echo "Find all links under \$HOME. It takes a few minutes..."
  links=$(find ~ -lname *.homeports/home/*)
  for link in $links; do
    print-link $link
  done
}

hp-log() {
  cd $HP_USER_HOME
  git log
}

hp-sh() {
  echo "Enter ${HP_DIR}"
  cd $HP_USER_HOME
  $HP_SHELL
}

hp-update() {
  cd $HP_DIR
  git pull
}

# Utilities
# ---------

confirm() {
  read -p "$1 [y/N]: " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 0
  fi
}

print-link() {
  echo "${1} -> $(realpath $1)"
}

is-managed-symlink() {
  path=$(realpath $1)
  if [ "${path/$HP_USER_HOME}" = "${path}" ]; then # detect is-not-substring
    return 1
  fi
  return 0
}

has-symlink() {
  is-managed-symlink $HOME/$1
}

# Main Script
# -----------

case $subcommand in
    "" | "-h" | "--help")
        hp-help
        ;;
    *)
        shift
        hp-${subcommand} $@
        if [ $? = 127 ]; then
          hp-help
        fi
        ;;
esac